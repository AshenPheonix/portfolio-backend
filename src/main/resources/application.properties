server.port=${PORT:2019}
# server.servlet.context-path=/apis

# Which db to run
# local.run.db=H2
 local.run.db=POSTGRESQL

# Environment Variables Needed
# MYDBHOST
# MYDBNAME
# MYDBUSER
# MYDBPASSWORD

# Find heroku info
# heroku config -a jrmmba-starthere
# postgres://gmsvrefyrxhhcy:6707bfeb8768e32dea7f485c0e9c18ec3681077e7c0ccaaf01c93564d16099f4@ec2-54-227-251-33.compute-1.amazonaws.com:5432/d4nkq6giq3lemc
# posgress://username      :password                                                        @url                                      :5432/dbname

# Begin h2 configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true
# End h2 configuration


# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always

# Good for production!
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=never
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false

# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false

# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
